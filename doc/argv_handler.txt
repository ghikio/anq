ARGV_HANDLER

CREATED: 2018-07-23
UPDATED: 2018-09-15

AUTHOR: criw <contact@thecriw.com>

Defines a interface where each argument information is saved in different
arrays with the same index.

The structure:

	/* Type of the pointer which saves the callback function. 
	 * Note that the program itself doesn't check if the arguments
	 * are null, is the handler function responsibility to do so.*/
	typedef int (*argv_fp)(char *, char *);

	* argv    - stores each defined argument.
	* fops    - stores the pointer to the argument's callback function. 
	*
	* argc    - stores how much arguments have been inserted. */
	struct args_handler {
		char argv[ARGV_SIZE][ARGV_READ_SIZE];
		argv_fptr fops[ARGV_SIZE];

		short argc;
	};


Those two internal functions that shouldn't be used outside but are
used to start and exit the args parse mode.

	void args_init(int argc, char *argv[]);
	void args_exit();

And new arguments should be added using argv_add_argument function.

	void args_new_arg(char *arg,
			  argv_fptr fop);

	parameters:

	* parameter:	The new argument. (e.g. -d)
	* fop:		The argument callback function. */

	e.g.

	args_add_arg("-d", decrypt_function);
	args_add_arg("-e", encrypt_function);


Finally argv_parse from "argv_parser.h" should be called when everything 
is setted. 

	void parse_argv(int argc, char *argv[]);
