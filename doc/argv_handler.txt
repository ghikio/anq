ARGV_HANDLER

CREATED: 2018-07-23
UPDATED: 2018-07-25

AUTHOR: criw <contact@thecriw.com>

Defines a interface where each argument information is saved in different
arrays with the same index.

The structure:

	* argv    - stores each defined argument.
	* has_del - stores the possibility of the argument having value. 
	* fops    - stores the pointer to the argument's callback function. 
	*
	* argc    - stores how much arguments have been inserted. */
	struct s_argv_handler {
		char argv[ARGV_SIZE][ARGV_READ_SIZE];
		bool has_del[ARGV_SIZE];
		argv_fptr fops[ARGV_SIZE];

		short argc;
	};


The above structure must be initialized before any usage with:
	
	int  argv_init(void);

	return:

	* Return 0 on success.
	* Return ANQ_ERR_UNALLOCATED_STRUCT if malloc fails.


And freed when there is no need of it with:
	
	void argv_exit(void);


And new arguments should be added using argv_add_argument function:

	argv_add_parameter(char *arg,
			   char *desc,
			   bool del,
			   argv_fptr fop);

	parameters:

	* parameter:	The new argument. (e.g. -d)
	* description:	A description of the parameter.
	* del:		True if the argument has a value, false if not.
	*		(.e.g. false -> -d, true -> -d=something).
	* fop:		The argument callback function. */


	return:

	* Return 0 on success.
	* Return ANQ_ERR_MAX_ARGS_EXCEEDED if argc is bigger than ARGV_SIZE.

	e.g.

	argv_add_parameter("-d", "Decrypt Service", true,  decrypt_function);
	argv_add_parameter("-e", "Encrypt Service", false, encrypt_function);


Finally argv_parse from "argv_parser.h" should be called when everything 
is setted.

	void argv_parse(int argc, char *argv[]);
